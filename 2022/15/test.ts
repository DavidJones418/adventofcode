import { assertEquals } from "testing/asserts.ts";
import { parse, SensorSet } from "./lib.ts";

const input = Deno.readTextFileSync(new URL("input.txt", import.meta.url));

Deno.test("parse", () => {
  assertEquals([...parse(`
    Sensor at x=2, y=18: closest beacon is at x=-2, y=15
    Sensor at x=9, y=16: closest beacon is at x=10, y=16
    Sensor at x=13, y=2: closest beacon is at x=15, y=3
    Sensor at x=12, y=14: closest beacon is at x=10, y=16
    Sensor at x=10, y=20: closest beacon is at x=10, y=16
    Sensor at x=14, y=17: closest beacon is at x=10, y=16
    Sensor at x=8, y=7: closest beacon is at x=2, y=10
    Sensor at x=2, y=0: closest beacon is at x=2, y=10
    Sensor at x=0, y=11: closest beacon is at x=2, y=10
    Sensor at x=20, y=14: closest beacon is at x=25, y=17
    Sensor at x=17, y=20: closest beacon is at x=21, y=22
    Sensor at x=16, y=7: closest beacon is at x=15, y=3
    Sensor at x=14, y=3: closest beacon is at x=15, y=3
    Sensor at x=20, y=1: closest beacon is at x=15, y=3
  `)], [
    [[2n, 18n], [-2n, 15n]],
    [[9n, 16n], [10n, 16n]],
    [[13n, 2n], [15n, 3n]],
    [[12n, 14n], [10n, 16n]],
    [[10n, 20n], [10n, 16n]],
    [[14n, 17n], [10n, 16n]],
    [[8n, 7n], [2n, 10n]],
    [[2n, 0n], [2n, 10n]],
    [[0n, 11n], [2n, 10n]],
    [[20n, 14n], [25n, 17n]],
    [[17n, 20n], [21n, 22n]],
    [[16n, 7n], [15n, 3n]],
    [[14n, 3n], [15n, 3n]],
    [[20n, 1n], [15n, 3n]],
  ]);
});

Deno.test("SensorSet", () => {
  const s = new SensorSet([
    [[2n, 18n], [-2n, 15n]],
    [[9n, 16n], [10n, 16n]],
    [[13n, 2n], [15n, 3n]],
    [[12n, 14n], [10n, 16n]],
    [[10n, 20n], [10n, 16n]],
    [[14n, 17n], [10n, 16n]],
    [[8n, 7n], [2n, 10n]],
    [[2n, 0n], [2n, 10n]],
    [[0n, 11n], [2n, 10n]],
    [[20n, 14n], [25n, 17n]],
    [[17n, 20n], [21n, 22n]],
    [[16n, 7n], [15n, 3n]],
    [[14n, 3n], [15n, 3n]],
    [[20n, 1n], [15n, 3n]],
  ]);
  assertEquals([...s.render()], [
    "..........#..........................",
    ".........###.........................",
    "........#####........................",
    ".......#######.......................",
    "......#########.............#........",
    ".....###########...........###.......",
    "....#############.........#####......",
    "...###############.......#######.....",
    "..#################.....#########....",
    ".###################.#.###########...",
    "##########S########################..",
    ".###########################S#######.",
    "..###################S#############..",
    "...###################SB##########...",
    "....#############################....",
    ".....###########################.....",
    "......#########################......",
    ".......#########S#######S#####.......",
    "........#######################......",
    ".......#########################.....",
    "......####B######################....",
    ".....###S#############.###########...",
    "......#############################..",
    ".......#############################.",
    ".......#############S#######S########",
    "......B#############################.",
    ".....############SB################..",
    "....##################S##########B...",
    "...#######S######################....",
    "....############################.....",
    ".....#############S######S######.....",
    "......#########################......",
    ".......#######..#############B.......",
    "........#####....###..#######........",
    ".........###......#....#####.........",
    "..........#.............###..........",
    ".........................#...........",
  ]);
  assertEquals(s.countVisible(10n), 26);
});

Deno.test("part 1", () => {
  const s = new SensorSet([...parse(input)]);
  assertEquals(s.countVisible(2_000_000n), 5142231);
});
