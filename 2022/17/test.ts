import { assertEquals } from "testing/asserts.ts";
import { Model } from "./lib.ts";

const input = Deno.readTextFileSync(new URL("input.txt", import.meta.url));

Deno.test("Model", () => {
  const model = new Model(">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>");
  assertEquals(
    model.toString(),
    "..@@@@.\n" +
      ".......\n" +
      ".......\n" +
      ".......",
  );

  model.step();
  assertEquals(
    model.toString(),
    "...@@@@\n" +
      ".......\n" +
      ".......",
  );

  model.step();
  assertEquals(
    model.toString(),
    "...@@@@\n" +
      ".......",
  );

  model.step();
  assertEquals(
    model.toString(),
    "...@@@@",
  );

  model.step();
  assertEquals(
    model.toString(),
    "...@...\n" +
      "..@@@..\n" +
      "...@...\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "..####.",
  );

  model.step();
  assertEquals(
    model.toString(),
    "..@....\n" +
      ".@@@...\n" +
      "..@....\n" +
      ".......\n" +
      ".......\n" +
      "..####.",
  );

  model.step();
  assertEquals(
    model.toString(),
    "...@...\n" +
      "..@@@..\n" +
      "...@...\n" +
      ".......\n" +
      "..####.",
  );

  model.step();
  assertEquals(
    model.toString(),
    "..@....\n" +
      ".@@@...\n" +
      "..@....\n" +
      "..####.",
  );

  model.step();
  assertEquals(
    model.toString(),
    "....@..\n" +
      "....@..\n" +
      "..@@@..\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "...#...\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "..@....\n" +
      "..@....\n" +
      "..@....\n" +
      "..@....\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "..#....\n" +
      "..#....\n" +
      "####...\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "..@@...\n" +
      "..@@...\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "..@@@@.\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "....##.\n" +
      "....##.\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "...@...\n" +
      "..@@@..\n" +
      "...@...\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      ".####..\n" +
      "....##.\n" +
      "....##.\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "....@..\n" +
      "....@..\n" +
      "..@@@..\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "..#....\n" +
      ".###...\n" +
      "..#....\n" +
      ".####..\n" +
      "....##.\n" +
      "....##.\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "..@....\n" +
      "..@....\n" +
      "..@....\n" +
      "..@....\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      ".....#.\n" +
      ".....#.\n" +
      "..####.\n" +
      ".###...\n" +
      "..#....\n" +
      ".####..\n" +
      "....##.\n" +
      "....##.\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "..@@...\n" +
      "..@@...\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "....#..\n" +
      "....#..\n" +
      "....##.\n" +
      "....##.\n" +
      "..####.\n" +
      ".###...\n" +
      "..#....\n" +
      ".####..\n" +
      "....##.\n" +
      "....##.\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );

  while (model.step());
  assertEquals(
    model.toString(),
    "..@@@@.\n" +
      ".......\n" +
      ".......\n" +
      ".......\n" +
      "....#..\n" +
      "....#..\n" +
      "....##.\n" +
      "##..##.\n" +
      "######.\n" +
      ".###...\n" +
      "..#....\n" +
      ".####..\n" +
      "....##.\n" +
      "....##.\n" +
      "....#..\n" +
      "..#.#..\n" +
      "..#.#..\n" +
      "#####..\n" +
      "..###..\n" +
      "...#...\n" +
      "..####.",
  );
});

Deno.test("part 1", () => {
  assertEquals(new Model(input).heightAfter(2022), 3224);
});
